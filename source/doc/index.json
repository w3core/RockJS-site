[{"objectID":"1","anchor":"#\/doc\/1","title":"Introduction","content":"RockJS is a minimalistic, high-performance and intuitive single-page application\nframework that allows quickly create a powerful Desktop, Android or iOS native-like\napplications with a big amount of UI components.\nThis framework contains only those features that really needed.\nIt does not implements so popular things as observing, data-binding, etc.\nbecause behind the scenes, implementation of this things requires invalidation\nof all levels of object when only one property has been changed.\nIt\u2019s lead to low performance UI and rapid discharging of the battery on device.\nRockJS has really small size that allows to decrease loading time and show\nfirst screen.\n\nLet\u2019s check loading speed for minimal application.\nConnection speed will be decreased to regular 2G (300ms, 250kbit\/s, 50kbit\/s)\nto simulate real-world conditions for mobile devices.\n\nHowever, RockJS is well-structured modular framework that provides a list of\nfeatures from the box that really needed in any powerful application such as:\n\nBuiltin lazy loading pattern;\nCross-browser routing;\nAbility for precaching of any components in the main bundle;\nBuiltin an application build system that supports uglification for HTML,JS and CSS too;\nCommand line interface to create of new instances of application\/layout\/module;\netc.\n\nBasically, the page creation is based on the following structure:\n\nModules aka Components (overwritable onCreate, onShow, onHide, etc.);\nLayouts (same as modules but used to describe page layout with areas for modules placements);\nPages (simple definition what should be used: name, route, layout, modules with their location in layout);\n\nVisually it can be shown as follow:"},{"objectID":"2","anchor":"#\/doc\/2","title":"Lineaments","content":"RockJS never re-rendering no one component instance if it\u2019s not required.\nAny resources of components such as DOM and stylesheets will be mounted to the\ndocument only when component is defined in the page layout and the page is shown.\nOtherwise, these resources will be unmounted from document when page will be hided.\nRockJS allows to create and show any page or component on the fly without waiting\nfor the loading complete.\nRockJS allows to create manually and use single instance of component for many\npages at the same time.\nRockJS is an event based framework that means that any component will be notified\nabout any changes of state and can handle these changes any time.\nRockJS provides a wrapper for any page or component (layout, module, etc.) that\nhas specific-named classnames which allows to describe UI for any case as you wish.\nRockJS provides solutions which allows easily embed or gum up any components or\ncontent as you need."},{"objectID":"3","anchor":"#\/doc\/3","title":"Requirements","content":"The only thing that you need is PHP command line interface which used for\napplication build process (see: here)."},{"objectID":"4","anchor":"#\/doc\/4","title":"Installation","content":"Clone or download sources to something like rockjs directory.\nThis directory will be used for the building of all your projects.\nAlso, for best usability you can define value of\n\/path\/to\/your\/rockjs\/cli into the system PATH environment."},{"objectID":"5.1","anchor":"#\/doc\/5.1","title":"CLI","content":"To show CLI help dialog you can run:\n... \nReturns something like that:\n... \n\n\nCreate new application in the  directory otherwise current directory if not defined.\n\nNote that the directory should be empty!\n\n... \n\n\nCreate new layout in the  directory otherwise current directory if not defined.\n\nBy default, you should create layouts in the your\/app\/layouts directory.\nNote that layout name will be same as his directory name.\n\n... \n\n\nCreate new module in the  directory otherwise current directory if not defined.\n\nBy default, you should create modules in the your\/app\/modules directory.\nNote that module name will be same as his directory name.\n\n... \n\n\nDeploy an application (see detals [here][cli]).\n... \n\n\n\nAn example of usage you can find in cli.example.sh\n(for macOS\/OS X and Linux) and cli.example.bat for Windows."},{"objectID":"5.2","anchor":"#\/doc\/5.2","title":"Project configuration","content":"A most of popular IDEs allows to configure project building process.\nIt allows to be ease for development process by using of RockJS CLI for deployment.\nEclipse is one of the most popular IDE for Web.\nSo, it will be taken as example.\n\n\nCreate new or open existing JavaScript Project\n\n\n\nEnter project name and select what one of you need - create new project or\ncreate project from existing source:\n\n\n\nOpen project menu and create new builder by the following menu path\nProject &gt; Properties &gt; Builders &gt; New &gt; Program.\nIn the opening dialog fill the following fileds:\n\n\nName - the name of builder eg: \u201cBuild application\u201d\n\n\nMain &gt; Location - here you should enter path to PHP in your filesystem\n\n\nMain &gt; Working Directory - in most of cases it can be predefined Eclipse variable ${project_loc}\n\n\nMain &gt; Arguments - the command to deploy project by using RockJS CLI.\nAs you can see on the picture, an instance of RockJS application placed in the \/source directory of project.\nThe application will be compiled into the \/public directory.\nAll HTML, CSS and JS files will be optimized and compressed.\n\n\n\nOpen Refresh tab and set checkbox [x] Refresh resources upon completition\n\n\n\nPress to the OK button in the right bottom conner of dialog to save your builder.\n\n\n\n\nWhen your builder has been created, you can build your project by calling of\nthe following project menu command - Project &gt; Build Project"},{"objectID":"5.3","anchor":"#\/doc\/5.3","title":"Hello World!","content":"An application should contain at least one module.\nIf you going to define one or more pages then you should to have\nat least one layout.\nSo, let\u2019s go!\n\nOpen you console and run the following command to create an empty\nawesome application:... \n\n\nExcellent!\nYour awesome project has been created in the projects directory.\nAs you can see awesome directory contains the following:\n\n\n[layouts] - the directory where should be placed application layouts\n\n\n[modules] - the directory where should be placed application modules\n\n\n[js] - the directory where you can place some general scripts, some\nthird-party libs, etc.\nAlso you can see the following files in this directory:\n\n\nconfig.js - an application configuration file;\n\n\ninc.js - the file that will be placed to the main bundle\nand allows to control bootstrap logic;\n\n\nmap.js - the file where you can to define your pages (more)\n\n\n\n\nindex.html - Point of entry to your application.\n\n\n\n\nCreate your first module from console:\n... \nRight now your first module hello has been created as a directory and\ncontains the following files:\n\n\nscript.js - Module controller\n\n\nindex.html - Module markup\n\n\nstyle.css - Module stylesheet\n\n\n\nFor now we will skip details.\nMore detailed documentation you can find below.\n\nJust put these strings to below files:\nindex.html:\n... \nstyle.css:\n... \nscript.js:\n... \n\n\nCreate your first layout from console:\n... \n\nLayout structure and logic is the same as for modules, excluding some of\nextra features.\n\nFor the first time we should only to create the landing area where will\nbe placed module(s). Practically, it should be HTML tag with unique className.\nThe className will be used as identifier of landing area when you will\ndefine any page by using this layout.\nSo, please open the layouts\/main\/index.html file from your favorite IDE\nand put there something like:\n... \n\n\nMinimal configuration.\nBefore you start to create your first page, you should to configure defaults\nfor the page name and layout name that will be used as fallback.\nOpen the js\/config.js file and modify values for the following options:\njs\/config.js\n... \nAt the moment, we have all that needed to define the page.\n\n\nCreate your first (default) page.\nOpen the js\/map.js file and put there these strings (more):\njs\/map.js:\n... \n\n\nBuild your application from console to any empty directory:\n... \nThat\u2019s all. Your awesome application has been compiled to the static\nlazy-loading application in the .\/httpserver\/public\/awesome directory."},{"objectID":"5","anchor":"#\/doc\/5","title":"Quick Start Guide","content":"To create new application, layout, module or for the runing of build application\nprocess you can use command line interface (CLI)."},{"objectID":"6.1","anchor":"#\/doc\/6.1","title":"Event body","content":"An event is an object with the following structure:\n\n\n\nType\nName\nDefault\n\n\n\n\nString\ntype\n\u2018\u2019\n\n\nObject\ntarget\nnull\n\n\nMixed\ndata\nnull\n\n\nFunction\npreventDefault()\nnull\n\n\nFunction\nstopPropagation()\nnull\n\n\nBoolean\ndefaultPrevented\nfalse\n\n\nBoolean\npropagationStopped\nfalse\n\n\nBoolean\nreturnValue\ntrue"},{"objectID":"6.2","anchor":"#\/doc\/6.2","title":"Event prefix","content":"An event system is extended by the special pseudo-prefixes such as\n:ready and :once.\nAs for developer, these pseudo-prefixes, especially :ready allows\nto solve most of the day-to-day issues and simplify the code.\nThe most often case for asynchronous system is when the component that\nhas handler for some event has been loaded after then the event\nhas been dispatched.\n:ready - Indicates that the listener should be called even if the event\nhas been emitted before the listener was added.\n:once  - Indicates that the listener should be unsubscribed at once event\nwill emitted."},{"objectID":"6.3","anchor":"#\/doc\/6.3","title":"Event methods","content":"To handle or emit an external events can be used these methods:\n\n\n$R.on (types, listener) - The method registers the specified listener for single\nor multiple space or comma separated events;\nAny event that passed as argument can contain any combination of pseudo-prefixes.\n\n\n$R.off (types, listener) - The method removes single or multiple space or comma\nseparated events listener that was previously registered;\n\n\n$R.emit (type, data, target, preventCallback, stopCallback, completeCallback) - Asynchronously\ncalls each of the listeners registered for the event type, passing the supplied data and\ntarget to each.\nAlso, an emmiter can handle calling of preventDefault(), stopPropagation() and\ncomplete of execution process;\n\nNote that only first argument type is required."},{"objectID":"6.4","anchor":"#\/doc\/6.4","title":"Usage example","content":"..."},{"objectID":"6","anchor":"#\/doc\/6","title":"Events system","content":"Internally, RockJS is an event-based asynchronous framework.\nAny component can handle and emit internal and external events."},{"objectID":"7.1","anchor":"#\/doc\/7.1","title":"$O object structure","content":"DOM {node} Sandboxed DOM node of component instance;\n\n\nnode {object} The object of named DOM nodes (see details);\n\n\nid {string|null} An unique identifier of component instance (see details);\n\n\nname {string} The name of the component for which one was created instance (see details);\n\n\noptions {object} An object of instance options;\n\n\ntemplate (id[, DOM]) {function} This function allows to extract template body by id of template and\nas an optional DOM node where it placed. By default, initially it tries to get template from the\ncomponent DOM and then from the current document.body node.\nTemplate definition format: &lt;script type=&quot;text\/template&quot; id=&quot;{id}&quot;&gt; {template} &lt;\/script&gt;\n\n\nspin {spinner} Own instance of spinner for the current instance of component;\n\n\nstylesheet {style} A DOM node of stylesheet for the current instance of component;\n\n\ntype {string} A type of component (module\/layout\/etc.);\n\n\nisReady {function} This function allows to check is ready an instance of component or not at the moment;\n\n\nisVisible {function} This function allows to check is visible an instance of component or not at the moment;\n\n\nextractNodes (dom, def) {function} This function allows to create a reference object between module\nDOM nodes and them reference property names.\n\n\ndom {node} The DOM node that contains nodes which are listed in def\n\n\ndef {string|object} Reference definition"},{"objectID":"7.2","anchor":"#\/doc\/7.2","title":"Compositions and naming features","content":"To embed or gum up anything such as markup blocks, stylesheets, base64 encoded\ncontent or something else in any file, can be used include tag.\nFor more details look here.\nFrom the view side, any module has a &lt;div&gt; wrapper that has specific-named\nclassnames such as module and module-{moduleName} that linked to CSS via\nspecial #this selector.\nIn other words, to link any part of the module markup with his styles, you don\u2019t\nneed to start CSS selector from module-loremIpsumDolorSitAmet....\nInstead of this you can just write #this that will be automatically replaced\nto valid classname.\nMoreover, relative URLs supported from the style.css file (such as\nbackground-image, etc.), despite the fact that behind the scenes, all components\nare loaded as content via AJAX."},{"objectID":"7","anchor":"#\/doc\/7","title":"Module","content":"What is the module?\nModule is a component. In other words, a part or element of a larger whole and\nlogically allocated part of the page.\nFor the RockJS, component is a class that has independent DOM model and working\nby using declaration of special public properties and methods.\nEvery instance of component will be created by passing of two arguments:\n\n\n$R - an instance of application that created by RockJS.\nThis is an object that contains a many of global features within an anonymous\nenvironment (such as configuration, pages helper, modules helper, tools,\nand many many more);\n\n\n$O - an instance of environment for the component, that contains references\nto the DOM model, used by component DOM nodes (for the case when the component\nhas defined this.node property), instance of spinner, templating helpers, etc.\n\n\nUsually, most of your modules will contain UI components.\nTo define UI of module you can use the following properties:\n\n\n{String | Boolean} this.html- this property allows to define HTML markup of module.\n\n\n{String | Boolean} this.css - this property allows to define CSS stylesheets of module.\n\n\n{String | Object} this.node - this property helps you to select DOM nodes to the $O.node\nobject for working with them.\n\n\nA this.html and this.css properties can be defined by the following ways:\n\n\nAs inline string. So, you can put as string some HTML strings or CSS properties;\n\n\nAs Embedded content (more preffered way) by using special embedding tag include\nthat provided by RockJS (see here).\nFor example:\n... \n\n\nAs a boolean sign that means that this.html\/this.css files should be loaded by\nRockJS from the index.html\/style.css file that placed in the module directory.\nThis way is less preffered, because requires to create an additional HTTP requests\nthat increase loading time.\n\n\n\nA this.node property allows to predefine any amount of DOM nodes from the module DOM\nthat helps working with them for a long time. This property can be defined by different ways:\n\n\nAs object that should provide properties with a property name as an internal reference\nname and property value as a reference CSS selector in the module DOM.\nAlso, you can define the property value as boolean true, that means that internal reference\nname it the same as element className.\nFor example:\n... \n\n\nAs a special-formatted string that has similar to object way format.\nFor example:\n... \n\n\nAll predefined nodes will be available in the $O.node object at once when\nthe module will be created.\nIt will be something like that:\n... \nTo handling the global environment changes a component can define the following\nmethods:\n\n\nthis.onRequest (options) - This method can be used to communicate between components\neven when component instance was not created yet;\n\n\nthis.onCreate (options) - This method will be called once when component instance\nhas been created and environment of component $O is completely ready;\n\n\nthis.onShow (options, page) - This method will be called every time when component\ninstance should be shown;\n\n\nthis.onHide (options, page) - This method will be called every time when component\ninstance should be hidden;\n\n\n\nNote that these methods can be called also by an another components that includes\nthe component inside.\n\nAlso, component can handle and emit both internal and\/or external events.\nTo create an internal event environment you can use $R.eventFactory (this) class,\nthat extends your this object with internal event system.\nFor example:\n..."},{"objectID":"8.1.1","anchor":"#\/doc\/8.1.1","title":"Component instance structure","content":"The component (layouts and modules) instance provides the following properties and methods.\n\n\n\nName\nType\nDescription\n\n\n\n\nready(callback)\nFunction\nAllows to define function to call if\/when component instance will be completely ready.\n\n\nshow(options,page)\nFunction\nAllows to show component instance even if instance is not ready yet. As optional arguments, it can take options object for showing and instance of page.\n\n\nhide(options,page)\nFunction\nAllows to hide component instance even if instance is not ready yet. As optional arguments, it can take options object for hiding and instance of page.\n\n\nrequest(options,callback)\nFunction\nThis method can be used to communicate between components even if component instance is not ready yet. As optional arguments, it can take options object and callback function.\n\n\nisReady()\nFunction\nReturns a boolean to understand that instance of component is ready for showing (loaded and created) either not. Anyway an instance can be shown but it leads to showing of internal spinner of instance.\n\n\nisVisible()\nFunction\nReturns a boolean to understand that instance of component is visible at the moment either not.\n\n\ninstance\nObject\nAn internal environment (methods and properties) of instance.\n\n\noptions\nObject\nAn options of the component (see $O)."},{"objectID":"8.1","anchor":"#\/doc\/8.1","title":"$R.module.make(id, name, options, callback)","content":"Creates and immediately returns an instance of module even if the module was\nnot loaded yet. It allows to show, hide or do any requests to the module\nwithout waiting for loading.\nThe spinner inside the module will be shown while it\u2019s not available yet.\nAny requests to the module will be added to queue and executed when the module\nlogic will be available.\n\n\n\nArgument\nType\nDescription\n\n\n\n\nid\noptional String\nAn unique custom identifier that allows instance selection of the module by ID.\n\n\nname\nrequired String\nAn unique name of the module that required for loading module.\n\n\noptions\noptional Object\nAn object of options that should be passed to the module to create instance of module with specific options. These options will be passed to onCreate (options) method of the module.\n\n\ncallback\noptional Function\nThe function that should be called when instance of the module will be created.\n\n\n\nFor example:\n..."},{"objectID":"8.2","anchor":"#\/doc\/8.2","title":"$R.module.getById(id)","content":"Return an instance of module that was created with specified ID.\n\nConsidering to the fact that application has implementation of Lazy Loading\npattern, the desired module can be not defined at the moment yet.\nIn this case, you can add your handler for the componentCreate event.\nFor example:\n\n..."},{"objectID":"8.3","anchor":"#\/doc\/8.3","title":"$R.module.getInstanceById(id, name, options, callback)","content":"Same as $R.module.getById (id) excluding the fact that the instance of the\nmodule will be created if not exists yet."},{"objectID":"8.4","anchor":"#\/doc\/8.4","title":"$R.module.getByName(name)","content":"Returns an array of all instances of module by name that already exists."},{"objectID":"8.5","anchor":"#\/doc\/8.5","title":"$R.module.all()","content":"Returns an array of all instances of modules that has created in application\nat the moment.\nThe structure of instance of module you can find here."},{"objectID":"8.6.1","anchor":"#\/doc\/8.6.1","title":"$R.module.group().push(module, DOMNode)","content":"This method allows to push an instance or array of instances of modules\nto the group. As optional, you can define the DOM node where an instance(s)\nshould be injected."},{"objectID":"8.6.2","anchor":"#\/doc\/8.6.2","title":"$R.module.group().eject(module)","content":"This method ejects any instance of module from group."},{"objectID":"8.6.3","anchor":"#\/doc\/8.6.3","title":"$R.module.group().show(options)","content":"This method turns on all instances of modules in group to show.\nAs optional, you can to define any options that will be passed for showing."},{"objectID":"8.6.4","anchor":"#\/doc\/8.6.4","title":"$R.module.group().hide(options)","content":"This method turns off all instances of modules in group by calling of onHide method.\nAs optional, you can to define any options that will be passed for hiding."},{"objectID":"8.6.5","anchor":"#\/doc\/8.6.5","title":"$R.module.group().request(options)","content":"This method allows to call onRequest method for all instances of modules\nin group at same time.\nUsage example:\n..."},{"objectID":"8.6","anchor":"#\/doc\/8.6","title":"$R.module.group()","content":"This class allows to create a wrapper module to group any amount of module\ninstances and control them at the same time.\nAn instance of this class provides the following methods."},{"objectID":"8","anchor":"#\/doc\/8","title":"Module manager","content":"To manipulate with modules inside an application (for example: getting a class or\ninstance of module, embed one module or group of modules to another one, etc.)\ncan be useful Module Manager $R.module that provides following features."},{"objectID":"9","anchor":"#\/doc\/9","title":"Layout","content":"Page layout is the part of graphic design that deals in the arrangement of visual elements\non a page. It generally involves organizational principles of composition to achieve specific\ncommunication objectives.\nThe high-level page layout involves deciding on the overall arrangement of text and images,\nand possibly on the size or shape of the medium.\nPage layout might be described a greater or lesser degree as a page style which might be\nimplemented in a specific template.\nTypical page layout decisions include:\n\nGeneric font family and size\nGeneric size of margins and paddings\nGeneric colors\nSize and position of main areas such as header, body, footer and side pannels\nSome specific UI blocks, that can be used by different components, etc.\n\nIn terms of implementation, the layouts practically is same as modules because they\nare both a components, but with different mission.\nThe only difference between them is the following:\n\n\nAdditional string property this.title that can be used to define selector\ninside the DOM of component to duplicate page title value.\nFor example: this.title = &quot;h1.title&quot;;\n\n\nAnother one difference that the &lt;div&gt; wrapper of layout has layout class and\nlayout- prefix instead of module as for module.\n\n\nAdditionally, the &lt;div&gt; wrapper of layout and landing areas has a list of\nadditional classes such as module-exists-{moduleName} and\n{areaName}-module-{moduleName} that provides ability to describe UI\ndepending on the inside modules.\nBesides it you have ability to add dependencies for the current page, OS and\nbrowser engine, because &lt;html&gt; tag contains appropriate classes too.\nFor example:\n... \nAnd then you can do even something like that:\n... \n\n\nBasically, the most of your layout\/s will not provides any javascript logic excluding\nthis.html and this.css definition and it\u2019s fine.\nFeel free to describe some of extra-features by using javascript if you need.\nIt\u2019s a normally too.\nAn example of typical layout will be something like that.\nscript.js\n... \nindex.html\n... \nstyle.css\n..."},{"objectID":"10.1.1","anchor":"#\/doc\/10.1.1","title":"Page constructor structure","content":"All methods of the page constructor instance excluding get() and exec()\nreturns reference to this instance.\n\n\n\nMethod\nDescription\n\n\n\n\nname(name)\nAllows to define page name. The name of page should be unique within the application.\n\n\ntitle(title)\nAllows to define page title.\n\n\noptions(options)\nAllows to define an options object that should be applied to create the page.\n\n\nroute(route[,map])\nAllows to define page route (see here).\n\n\nlayout(id,name,options,callback)\nAllows to define custom layout that will be applied to the page. By default, will be used the default layout ($R.config.generic.layout.default.name) that can be configured in the your\/project\/js\/config.js file.\n\n\nmodule(location,position,id,name,options,callback)\nCreates and puts new instance of module to the page. For the module to be visible on the page should be defined an existing location (landing area - an unique className of HTML element) in the page layout and position (which one is order number in location). Rest of arguments has been described here.\n\n\nmodule(location,position,instance)\nPuts an existing instance of module to the page.\n\n\nget()\nReturns a definition object at the moment.\n\n\nexec()\nCreates and puts just created instance of page in the pages collection.\n\n\n\nUsage example:\n... \nBesides it you have ability to add dependencies for the current page\npage-{pageName}, OS and browser engine, because &lt;html&gt; tag contains appropriate\nclasses too."},{"objectID":"10.1.2","anchor":"#\/doc\/10.1.2","title":"Page instance structure","content":"The page instance provides the following properties and methods.\n\n\n\nName\nDescription\n\n\n\n\nisReady()\nReturns a boolean to understand that page is ready for showing (layout and modules has been loaded and created) either not. Anyway page can be shown but it leads to showing of page loading progress.\n\n\nisVisible()\nReturns a boolean to understand that page is visible at the moment either not.\n\n\nready(callback)\nAllows to define callback function to call if\/when page instance will be completely ready.\n\n\nshow(options)\nAllows to show page instance even if instance is not ready yet. As optional arguments, it can take options object for showing.\n\n\nhide(options)\nAllows to hide page instance even if instance is not ready yet. As optional arguments, it can take options object for hiding.\n\n\ntitle(title)\nAllows to change the title of the page instance.\n\n\nurl(options)\nReturns URL string to the current page by an optional options object. The options that figured out in the page route will be placed there. Rest of options will be transformed to the query string.\n\n\nlayout\nAn instance of layout that was defined for the page.\n\n\nmodule\nAn array of instances of modules that has been placed to the page at the moment.\n\n\noptions\nAn object that contains the latest options that was applied to the page to create, show and hide an instance.\n\n\nroute\nLow-level instance of route.\n\n\n\nUsage example:\n..."},{"objectID":"10.1","anchor":"#\/doc\/10.1","title":"$R.page.make(name)","content":"This method returns a page constructor that allows completely describe (title,\nlayout, modules, routing, etc.) and immediately create a page.\n\nThe name of page should be unique within the application."},{"objectID":"10.2","anchor":"#\/doc\/10.2","title":"$R.page.all()","content":"Returns an object of all instances of pages that has created in application\nat the moment. The name of property in this object is an unique name of page.\nAn instance of page has structure that was described earlier."},{"objectID":"10.3","anchor":"#\/doc\/10.3","title":"$R.page.define(name)","content":"This is page constructor that is more prefered for usage than $R.page.make,\nbecause it allows to define any amount of pages without of creation.\nThe pages will be automatically created only when will be required.\nIt allows to increase of loading speed.\nThis page constructor has the same structure that you can find here."},{"objectID":"10.4","anchor":"#\/doc\/10.4","title":"$R.page.defined()","content":"Returns an object of all definitions of pages which was defined in application\nat the moment. The name of property in this object is an unique name of page."},{"objectID":"10.5","anchor":"#\/doc\/10.5","title":"$R.page.get(name)","content":"Returns an instance of page by optional name parameter that was created earlier.\nBy default, returns an instance of current visible page."},{"objectID":"10.6","anchor":"#\/doc\/10.6","title":"$R.page.url(name, options)","content":"Returns a string representation of URL to any page by the page name and\noptional options parameters."},{"objectID":"10","anchor":"#\/doc\/10","title":"Page","content":"A page is a completely abstraction that composed by the layout and any amount of modules.\nAll these modules, except of background workers, should be placed into landing areas of\nthe layout. It should be described on the page level of abstraction for any individual page.\nAny layout should provide one or more amount of landing areas that can be identified by\nan unique className.\nDifferent pages can contain both individually and as shared instance of module.\nIn this case the instance of module will be moved to the page which is showing at the moment.\nTo manage pages of SPA site, RockJS provides pages manager that named as $R.page and has\nthe following methods."},{"objectID":"11.1.1","anchor":"#\/doc\/11.1.1","title":"Named segments","content":":id (in the example above) is a named segment.\nA named segment starts with : followed by the name.\nThe name must be at least one character in the regex character set a-zA-Z0-9.\nWhen matching, a named segment consumes all characters in the regex character set\na-zA-Z0-9-_~ %. A named segment match stops at \/, . but not at _, -, %.\nIf a named segment name occurs more than once in the pattern string, then the multiple\nresults are stored in an array on the returned object."},{"objectID":"11.1.2","anchor":"#\/doc\/11.1.2","title":"Optional segments","content":"(\/post\/:postId(\/*)) (in the example above) is an optional segment.\nTo make part of a pattern optional just wrap it in ( and ).\nOptional named segments are stored in the corresponding property only if they are present\nin the source string."},{"objectID":"11.1.3","anchor":"#\/doc\/11.1.3","title":"Wildcards","content":"* (in the example above) is a wildcard matches.\nWildcard matches will be collected to the _ property.\nIf there is only one wildcard then _ contains the matching string. Otherwise _ contains\nan array of matching strings."},{"objectID":"11.1","anchor":"#\/doc\/11.1","title":"Route as a string","content":"Definition of route as a string provides the following features.\n..."},{"objectID":"11.2","anchor":"#\/doc\/11.2","title":"Route as a regular expression","content":"If the pattern was created from a regex an array of the captured groups is returned on a match.\nWhen making a pattern from a regex you can pass an array of keys as the second argument.\nFor this case will be returned an objects on match with each key mapped to a captured value.\n..."},{"objectID":"11","anchor":"#\/doc\/11","title":"Routing","content":"By default, all pages that was defined has own route that based on the page name.\nBut practically, you can overload it for make a pretty semantic URL considering\nto one or more specific parameters.\nPage routing can be described by two different ways.\nFor most of cases you can define route as a string with named segments.\nBut in some cases it can be not enough. Then route can be defined as regular expression."},{"objectID":"12","anchor":"#\/doc\/12","title":"Server tags","content":"RockJS has some amount of own server-tags which will be processed on the server\nat the deployment moment.\nThe server-tags are wrapped in the language-specific comments to safe you source\ncodes clean and syntax valid.\nThe server-tag to be matched and processed should be in the following format.\nFor JavaScript or CSS like syntax can be used both single as and multiline\ncomments:\n... \nFor HTML can be used XML-specific comments:\n..."},{"objectID":"13","anchor":"#\/doc\/13","title":"Embedding","content":"In SPA applications very often there is a need to embed or gum up some parts to one,\nbecause it allows to reduce amount of HTTP requests to server that increases loading\nspeed.\nIt\u2019s really critically for the big and powerful applications because a big amount\nof components should to be loaded.\nTo solve this issue, RockJS provides solution such as specific include tag,\nthat will be processed on the server at the deployment moment.\nThis tag allows to embed content of any file by relative or absolute path.\n... \nBy default, content will be embed as is.\nBut, optionally, included content can be converted to one of supported\nby RockJS formats by using of format attribute.\nTo convert your content to JSON string you can define format attribute as string:\n... \nTo convert your content to the base64 data URL string you can define format\nattribute as base64:\n... \nFor the case, if required file is not exists you can optionally define default\nvalue by default attribute:\n..."},{"objectID":"14","anchor":"#\/doc\/14","title":"Templating and Precaching","content":"Besides of embedding feature to separate reusable blocks such as templates\nRockJS supports inline templates.\nAdding template via the script tag:\n... \nFor getting template inside of module or layout can be used\n$O.template(id[, DOM]) method (see details).\nAlso templates can be used for precaching  of any URL.\nIn other words, you can put  content to the template and put his URL to the id\nattribute. Getting of content via $R.xhr by this URL will\nreturn content of this template instead of execution of AJAX HTTP request.\nFor example:\n... \nand\n..."},{"objectID":"15.1","anchor":"#\/doc\/15.1","title":"pageShow event","content":"The pageShow event occurs when any page should be shown.\nAn event data property contains an options that was applied to show the page.\nThe target property contains the reference to the\npage instance."},{"objectID":"15.2","anchor":"#\/doc\/15.2","title":"pageHide event","content":"The pageHide event occurs when any page should be hidden.\nAn event data property contains an options that was applied to hide the page.\nThe target property contains the reference to the\npage instance."},{"objectID":"15.3","anchor":"#\/doc\/15.3","title":"pageCreate event","content":"The pageCreate event occurs when the new instance of any page\nhas been created. The target of pageCreate event contains an\ninstance of just created page."},{"objectID":"15.4","anchor":"#\/doc\/15.4","title":"componentShow event","content":"The componentShow event occurs when any module or layout\nshould be shown.\nAn event data property contains an options that was applied to show component.\nThe target property contains the reference to the\ncomponent instance.\nThis event can be used for preventing of showing the component when handler returns\nfalse or by using of preventDefault() event method."},{"objectID":"15.5","anchor":"#\/doc\/15.5","title":"componentHide event","content":"The componentHide event occurs when any module or layout\nshould be hidden.\nAn event data property contains an options that was applied to hide component.\nThe target property contains the reference to the\ncomponent instance."},{"objectID":"15.6","anchor":"#\/doc\/15.6","title":"componentRequest event","content":"The componentRequest event occurs when any component was\nrequested from an outside.\nAn event data property contains an options that was passed with request.\nThe target property contains the reference to the\ncomponent instance."},{"objectID":"15.7","anchor":"#\/doc\/15.7","title":"componentCreate event","content":"The componentCreate event occurs when the new instance of any\ncomponent has been created. The target of componentCreate event contains an\ninstance of just created component."},{"objectID":"15.8","anchor":"#\/doc\/15.8","title":"componentLoad event","content":"The componentLoad event occurs before componentCreate event\nwhen the component and all dependencies of this component has been loaded.\nEvent data property contains the following properties:\n\n\n\nName\nType\nDescription\n\n\n\n\ntype\nString\nThe type of component (module or layout).\n\n\nname\nString\nThe name of component that has been loaded.\n\n\nbody\nFunction\nConstructor of component."},{"objectID":"15.9","anchor":"#\/doc\/15.9","title":"titleChange event","content":"The titleChange event occurs when the title of page has been\nchanged by some reason.\nAn event data property contains an actual value of page title.\nThe target property contains the reference to the\npage instance."},{"objectID":"15.10","anchor":"#\/doc\/15.10","title":"bootComplete event","content":"The bootComplete event occurs at once when the application core\nwith all dependencies has been loaded and completely ready for showing content."},{"objectID":"15.11","anchor":"#\/doc\/15.11","title":"resolvePageShow event","content":"The resolvePageShow event occurs when any page is required to be shown.\nThis event unlike the pageShow event can be used for preventing of showing\nthe page by using of preventDefault() event method.\nFor example, it can be useful when user session has been expired and all requested\npages should be rejected with redirect to the login page.\nAn event data property contains an options that was applied to show the page.\nThe target property contains the reference to the\npage instance."},{"objectID":"15.12","anchor":"#\/doc\/15.12","title":"error event","content":"The error event occurs when error occurred (see more).\nAn event data property contains stack trace information or any custom dump to\nunderstand the reason of error.\nThe target property contains the reference to the logic that throws an error."},{"objectID":"15.13","anchor":"#\/doc\/15.13","title":"initConfig event","content":"The initConfig event occurs when application configuration\nhas been loaded."},{"objectID":"15.14","anchor":"#\/doc\/15.14","title":"initCOM event","content":"The initCOM event occurs when components management logic has\nbeen loaded and ready."},{"objectID":"15.15","anchor":"#\/doc\/15.15","title":"initCOMMap event","content":"The initCOMMap event occurs when the map.js file\nhas been loaded and evaluated and pages definition process\nhas been completed.\nSee: Page constructor structure."},{"objectID":"15","anchor":"#\/doc\/15","title":"System Events","content":""},{"objectID":"16.1","anchor":"#\/doc\/16.1","title":"map.js","content":"Any application can provide js\/map.js file.\nThis file used to define application pages. All pages that defined by using of\n$R.page.define() page constructor will not created right\naway but will be created automatically only when it needed.\nFor more details look at $R.page.define() and\npage constructor methods.\n\nNote that you should not call exec() method that used to create the page\nright away.\n\nUsage example:\n..."},{"objectID":"16.2","anchor":"#\/doc\/16.2","title":"inc.js","content":"Any application can provide js\/inc.js file.\nThis file included by RockJS to the core bundle. So it can be used to control core\nbootstrap process. For example it can be checking of authentication that requires\nan asynchronous API calls, loading of some dependencies or something else.\nAn application core is not completely loaded yet when this file included to the\ncore. So you can control the behavior of application by adding of additional\nsteps to the loading progress.\nThe bootComplete event occurs only when all steps has been processed.\nFor the case when you need to do something after boot, you can wrap it to the\nonBoot(fn) function.\nFor example:\n..."},{"objectID":"16.3.1","anchor":"#\/doc\/16.3.1","title":"$R.progressBar.show()","content":"Appends to document and shows DOM node of $R.progressBar instance.\n\nNote that z-index of progress node will be increased every time to cover the\nprevious shown progress.\n\n..."},{"objectID":"16.3.2","anchor":"#\/doc\/16.3.2","title":"$R.progressBar.hide()","content":"Hides DOM node of $R.progressBar instance by removing from document."},{"objectID":"16.3.3","anchor":"#\/doc\/16.3.3","title":"$R.progressBar.setMessage(msg)","content":"Used for describing of the current process to the visitor.\nIn other words, you can describe to user what currently you do or what are you\ngoing to do by passing string or DOM node as msg argument.\nFor example:\n..."},{"objectID":"16.3.4","anchor":"#\/doc\/16.3.4","title":"$R.progressBar.setCompleteMessage(msg)","content":"This method is very similar to the $R.progressBar.setMessage(msg)\nbut used to define the message that should be shown when the progress has been\ncompleted. In other words, when percentage value of progress is equal to 100%."},{"objectID":"16.3.5","anchor":"#\/doc\/16.3.5","title":"$R.progressBar.pushStep(id, amount)","content":"Used for adding of steps that should be processed to the progress instance.\nThis method used in common with doStep() which used to notify that the step\nhas been processed.\nAs arguments receives an unique id identifier of the step and an optional\namount of processes that should be processed.\nFor example:\n..."},{"objectID":"16.3.6","anchor":"#\/doc\/16.3.6","title":"$R.progressBar.doStep(id, amount)","content":"Used to notify that the step which was declared by pushStep() method has been\nprocessed.\nAs arguments receives an unique id identifier of the step and an optional\namount of processes that has been processed.\nFor example:\n..."},{"objectID":"16.3.7","anchor":"#\/doc\/16.3.7","title":"$R.progressBar.setStepCallback(fn)","content":"This method can be useful when you need to control steps execution.\nThe function fn will be called every time when called doStep() or pushStep()\nfunction for the current instance of progress.\nTo the fn function will be passed the following arguments:\n... \n\n\n\nName\nType\nDescription\n\n\n\n\noperation\nString\nThe type of operation (push or do).\n\n\nid\nString\nAn unique id identifier of step.\n\n\namount\nInteger\nCurrently passed as argument amount of steps.\n\n\nsummary\nObject\nAn object that contains total and has been passed amount of steps for the instance of progress at the moment.\n\n\ntotalAmount\nInteger\nTotal amount of steps for the instance of progress at the moment.\n\n\npassedAmount\nInteger\nPassed amount of steps for the instance of progress at the moment."},{"objectID":"16.3.8","anchor":"#\/doc\/16.3.8","title":"$R.progressBar.setCompleteCallback(fn)","content":"This method can be useful if you need to control when the progress execution will\nbe complete (all steps has been processed).\nFor example:\n..."},{"objectID":"16.3.9","anchor":"#\/doc\/16.3.9","title":"$R.progressBar.destroy()","content":"The progress instance destructor. By default you should not to destroy an instance\nwhen finished because an instance of progress will be destroyed automatically\n(see more)."},{"objectID":"16.3.10","anchor":"#\/doc\/16.3.10","title":"$R.progressBar.auto(bool)","content":"By default an instance of progress will be destroyed automatically when all steps\nhas been processed and progress finished. But sometimes you need to do something\nmore after the progress has been finished. In this case you can change\nautodestruction status to the one that you need.\nFor example:\n..."},{"objectID":"16.3.11","anchor":"#\/doc\/16.3.11","title":"$R.progressBar.isAuto()","content":"Returns current status of autodestruction."},{"objectID":"16.3.12","anchor":"#\/doc\/16.3.12","title":"$R.progressBar.node","content":"This is a reference to the DOM node of current instance of progress."},{"objectID":"16.3.13","anchor":"#\/doc\/16.3.13","title":"Progress Bar UI customisation","content":"By default, UI of progress is built into core to delivery of first picture as\nsoon as possible. It makes some limitations as for UI customization, but anyway\nyou can globally reload HTML markup and CSS stylesheets of progress.\nTo reload UI of progress you just need to create the following directory your\napplication instance with the following files inside:\nfor HTML:\n... \nfor CSS:\n... \nThere you can write anything that you need."},{"objectID":"16.3","anchor":"#\/doc\/16.3","title":"$R.progressBar","content":"This is a class that provides similar to the JavaScript Promise logic but more\nflexible and with built in UI which can be customized and turned on or turned\noff when it needed.\n... \n\nAny method of instance of $R.progressBar returns the reference to the instance.\n\nA progress bar UI is a graphical control element used to visualize the progression\nof an extended operation, such as a download, file transfer, or installation.\nThe graphic is accompanied by a percentage representation of the progress and an\noptional textual messages."},{"objectID":"16.4","anchor":"#\/doc\/16.4","title":"$R.bootProgress","content":"This is an instance of $R.progressBar that has been created by core for the\nsystem usage.\nThis instance used as a first picture that showing for the user while an\napplication loading process is not finished yet.\nYou can use this progress for anything that you need inside bootstrap process\nvia inc.js file (see more). For example it can be checking of\nauthentication that requires an asynchronous API calls, loading of some\ndependencies or something else."},{"objectID":"16","anchor":"#\/doc\/16","title":"Bootstrap and loading progress","content":"Sometimes or even for most cases occurs necessity to control bootstrap process\nbefore showing of page. It can be checking of authentication that requires an\nasynchronous API call, loading of some dependencies or something else.\nRockJS provides some endpoints and solutions that step-by-step allows to do it\nand visualize it for user."},{"objectID":"17.1.1","anchor":"#\/doc\/17.1.1","title":"$R.xhr(options)","content":"Object options - A set of key\/value pairs that configure the Ajax request.\nA complete list of all options is below. All options are optional and has default values.\n\n\n\nProperty\nType\nDefault\nDescription\n\n\n\n\nurl\nString\nlocation.href\nA string containing the URL to which the request is sent.\n\n\ntype\nString\nGET\nThe HTTP method to use for the request (e.g. \u201cPOST\u201d, \u201cGET\u201d, etc.).\n\n\ndata\nObject\n{}\nData to be sent to the server. Object must be Key\/Value pairs. If value is an Array, RockJS serializes multiple values with same key based on the value of the traditional setting.\n\n\nsuccess(response,xhr)\nFunction\nnull\nA function to be called if the request succeeds.\n\n\ncomplete(response,xhr)\nFunction\nnull\nA function to be called when the request finishes (after success and error callbacks are executed).\n\n\nerror(response,xhr)\nFunction\nnull\nA function to be called if the request fails.\n\n\ncontentType\nString\napplication\/x-www-form-urlencoded\nWhen sending data to the server, use this content type. Default is \u201capplication\/x-www-form-urlencoded\u201d, which is fine for most cases.\n\n\ntimeout\nInteger\n30000\nSet a timeout (in milliseconds) for the request.\n\n\nasync\nBoolean\ntrue\nBy default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false.\n\n\nheaders\nObject\n{}\nAn object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport.\n\n\ncache\nBoolean\ntrue\nIf set to false, it will force requested pages not to be cached by the browser.\n\n\nxRequestedWith\nString\nnull\nAllows to define value for X-Requested-With HTTP header.\n\n\n\nUsage example:\n..."},{"objectID":"17.1.2","anchor":"#\/doc\/17.1.2","title":"$R.xhr(url, options)","content":"Allows to separate url parameter from options that can be useful to unify options object.\nUsage example:\n..."},{"objectID":"17.1.3","anchor":"#\/doc\/17.1.3","title":"$R.xhr(url, callback)","content":"Can be useful to create a simple GET request by easiest way.\nUsage example:\n..."},{"objectID":"17.1","anchor":"#\/doc\/17.1","title":"$R.xhr()","content":"Perform an asynchronous HTTP (Ajax) request."},{"objectID":"17.2","anchor":"#\/doc\/17.2","title":"$R.inject(url, callback)","content":"Performs injection of JavaScript logic into the global anonymous namespace.\n\nIt can be used ONLY for importing of internal components of application.\nBecause including of third-party libraries is potentially insecure way.\nFor using of third-party libraries should be used\n$R.include or\n$R.include_once functions.\nSo, be careful for using of this functionality.\n\nUsage Example:\n..."},{"objectID":"17.3","anchor":"#\/doc\/17.3","title":"$R.include(type, url, callback, skipErrors)","content":"Performs including of any JavaScript or Stylesheet file into document.\nThe function gets passed follow arguments:\n\n\n\nName\nType\nDescription\n\n\n\n\ntype\nString\nThe type of requested resource (js or css).\n\n\nurl\nString\nA string containing the URL to the requested resource.\n\n\ncallback\nFunction\nA function to be called when the request finishes.\n\n\nskipErrors\nBoolean\nDefault: false. Older mobile devices does not allows to handle load events for stylesheets. So, it can be useful for these cases.\n\n\n\nUsage Example:\n..."},{"objectID":"17.4","anchor":"#\/doc\/17.4","title":"$R.include_once(type, url, callback, skipErrors)","content":"Same as $R.include but performs preventing of double loading."},{"objectID":"17","anchor":"#\/doc\/17","title":"Content delivery","content":"RockJS provides some of solutions to communicate with server which can be used\nfor getting of content, loading of external scripts or stylesheets, extending of\nlogic by injection to the anonymous namespace."},{"objectID":"18.1","anchor":"#\/doc\/18.1","title":"$R.log(title, value)","content":"Performs adding of entry to the RockJS log.\nThe function gets passed two arguments:\n\n\n\nName\nType\nDescription\n\n\n\n\ntitle\nRequired String\nLog entry title\n\n\nvalue\nOptional Mixed\nAny value that will be human readable presented by RockJS\n\n\n\nUsage Example:\n..."},{"objectID":"18.2.1","anchor":"#\/doc\/18.2.1","title":"$R.error.type(code)","content":"Allows to detect type of error by error code string.\n\nNote that it\u2019s allows to detect only for predefined types aka. component,\napplication, system and core\n\nUsage Example\n..."},{"objectID":"18.2.2","anchor":"#\/doc\/18.2.2","title":"$R.error.code(string)","content":"Allows to extract error code number from error code string.\nUsage Example\n..."},{"objectID":"18.2","anchor":"#\/doc\/18.2","title":"$R.error(code, message, target, dump)","content":"Performs adding of error entry to the RockJS log.\nThe function gets passed two arguments:\n\n\n\nName\nType\nDescription\n\n\n\n\ncode\nString\nError code.\n\n\nmessage\nString\nError message.\n\n\ntarget\nMixed\nError target object.\n\n\ndump\nMixed\nError dump object.\n\n\n\nIn order to make error code, it is recommended using of {type}:{code} format,\nwhere {type} is a single char that indicates to the type of error and {code}\nis a code number of error. RockJS has some predefined types of error that can be\nuseful but you able to use your own codes if you need.\nPredefined types of error\n\n\n\nType\nDescription\n\n\n\n\nc\nComponent\n\n\na\nApplication\n\n\nr\nCore\n\n\ns\nSystem\n\n\n\nUsage Example:\n..."},{"objectID":"18.3","anchor":"#\/doc\/18.3","title":"$R.errors()","content":""},{"objectID":"18","anchor":"#\/doc\/18","title":"Logging and Mobile debugging","content":"RockJS has own built-in features that allows easy code debugging and logging\nprocess.\nDebugging mode can be turned on\/off by using of the generic.debug.status\nproperty in the \/js\/config.js file:\n... \nSometimes, when some bug occurs only on production (when debugging mode is\nturned off) and can not be reproduced in development mode, RockJS allows to\nunderstand what\u2019s wrong by using of special hot keys as for desktop and for\nmobile by using special tricks.\nDebugging mode can be switched although to the value of generic.debug.status\nin the \/js\/config.js file.\nDebugging mode can be switched by pressing at the same time of Ctrl + Alt + Shift + F12\nkeys on desktop otherwise 20 touches till 5 seconds in the application on\nmobile devices.\nRockJS log will be presented as a list of entry titles.\nAny entry can be expanded or collapsed by tapping to the title of entry.\nTapping to the \u201cminus\u201d button that located in the top-right corner of any entry\nreveal to removing of entry from list.\n\nRockJS provides the following methods for working with log from the code side."}]